buildscript {
    ext.corda_release_group = 'net.corda'
    ext.corda_release_version = '4.1'
    ext.tokens_release_group = 'com.r3.corda.lib.tokens'
    ext.tokens_release_version = '1.0'
    ext.corda_gradle_plugins_version = '4.0.42'
    ext.kotlin_version = '1.2.71'
    ext.junit_version = '4.12'
    ext.quasar_version = '0.7.10'
    ext.retrofit_version = '2.4.0'
    ext.okhttp_version = '3.9.1'
    ext.retrofit_version = '2.4.0'
    ext.jopt_simple_version = '5.0.2'
    ext.slf4j_version = '1.7.25'
    ext.log4j_version = '2.11.1'
    ext.artifactory_contextUrl = 'https://ci-artifactory.corda.r3cev.com/artifactory'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://kotlin.bintray.com/kotlinx' }
        maven { url "$artifactory_contextUrl/corda-releases" }
        maven { url "$artifactory_contextUrl/list/corda-dev/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

allprojects {
    apply plugin: 'kotlin'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        // Can be removed post-release - used to get nightly snapshot build.
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-dev' }
        maven { url "https://ci-artifactory.corda.r3cev.com/artifactory/corda-lib" }
        maven { url "https://ci-artifactory.corda.r3cev.com/artifactory/corda-lib-dev" }
        maven { url 'https://jitpack.io' }
        maven { url 'https://repo.gradle.org/gradle/libs-releases-local/' }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }

    jar {
        // Don't include log config files.
        exclude "**/log4j2*.xml"
        // We need this because log4j2.xml is pulled in from multiple dependency JARs.
        // JAR signing will fail if there are multiple files with the same name.
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }


}

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Corda integration dependencies
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // For testing.
    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"

    // CorDapp dependencies
    // Specify your CorDapp's dependencies below, including dependent CorDapps.
    // We've defined Cash as a dependent CorDapp as an example.
    cordapp project(":common:contracts")
    cordapp project(":common:workflows")
    cordapp project(":daemon")
    cordapp project(":client")
    cordapp project(":service")
    cordapp project(":spring-boot-client")
    cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-money:$tokens_release_version"
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar','daemon:shadowJar']) {
    directory "./build/nodes"
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp("$tokens_release_group:tokens-contracts:$tokens_release_version")
        cordapp("$tokens_release_group:tokens-workflows:$tokens_release_version")
        cordapp("$tokens_release_group:tokens-money:$tokens_release_version")
        cordapp project(":common:contracts")
        cordapp project(":common:workflows")
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
        cordapps = []
    }
    node {
        name "O=Issuer,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        cordapp project(":service")
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyA,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        cordapp project(":client")
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyB,L=New York,C=US"
        p2pPort 10011
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10052")
        }
        cordapp project(":client")
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}
